# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-python-requirements
custom: ${file(./parameters.yml)}

service: devops-resources-demo # NOTE: update this with your service name

provider:
  name: aws
  runtime: python2.7
  role: arn:aws:iam::${self:custom.accountid}:role/Lambda_dynamo_Kinesis_ebaccess
  region: ${self:custom.region}
  vpc:
    securityGroupIds:
      - ${self:custom.sg}
    subnetIds:
      - ${self:custom.subnet1}

functions:
  deployapi:
    name: deployapi-${self:custom.stage}
    handler: deployapi.lambda_handler
    environment:
      REPO_URI: ${self:custom.repouri}
      VPC: ${self:custom.vpc}
      ALB_SUBNET1: ${self:custom.elbsubnet1}
      ALB_SUBNET2: ${self:custom.elbsubnet2}
      ALB_SG: ${self:custom.elbsg}
      SUBNET1: ${self:custom.subnet1}
      SUBNET2: ${self:custom.subnet2}
      SG: ${self:custom.sg}
    events:
      - s3:
         bucket: agero-serverless-api-packages-demo
         event: s3:ObjectCreated:*  

  healthcheckapi:
    name: healthcheck-${self:custom.stage}
    handler: healthcheckapi.lambda_handler
    timeout: 10
    
    events:
      - http:
         path: /
         method: post
         integration: lambda
         request:
           template:
             application/json: '{"api":"$input.params("api")"}'
             
  devopshealthcheckapi:
    name: devopshealthcheckapi-${self:custom.stage}
    handler: devopshealthcheckapi.lambda_handler
    timeout: 10
    events:
      - http:
          path: /devops/health
          method: get
          integration: lambda

  querydevopslogsapi:
    name: querydevopslogs-${self:custom.stage}
    handler: querydevopslogsapi.lambda_handler
    timeout: 10
    events:
      - http:
          path: /devops/querylogs
          method: get
          integration: lambda
          request:  
            template:
              application/json: '{"resourcename": "$input.params(''resourcename'')", "starttime": "$input.params(''starttime'')", "endtime": "$input.params(''endtime'')"}'
              
  createstackapi:
    name: createstackapi
    handler: createstackapi.lambda_handler
    timeout: 900
    environment:
      CF_TEMPLATE: ${self:custom.cftemplate}
      VPC: ${self:custom.vpc}
      ALB_SUBNET1: ${self:custom.elbsubnet1}
      ALB_SUBNET2: ${self:custom.elbsubnet2}
      ALB_SG: ${self:custom.elbsg}
      SUBNET1: ${self:custom.subnet1}
      SUBNET2: ${self:custom.subnet2}
      SG: ${self:custom.sg}
      REPO_URI: ${self:custom.repouri}
      HOSTEDZONE_NAME: ${self:custom.hostedzonename}     
    events:
      - http:
          path: /stacks
          method: post
          cors: true
              
  deletestackapi:
    name: deletestackapi-${self:custom.stage}
    handler: deletestackapi.lambda_handler
    timeout: 120
    events:
      - http:
          path: /stacks
          method: delete
          cors: true
  
  ecsdeployapi:
    name: ecsdeployapi-${self:custom.stage}
    handler: ecs_deployapi.lambda_handler
    timeout: 300
    environment:
      REPO_URI: ${self:custom.repouri}
      VPC: ${self:custom.vpc}
      SUBNET1: ${self:custom.subnet1}
      SUBNET2: ${self:custom.subnet2}
      SG: ${self:custom.sg}
    events:
      - http:
          path: /stacks/deploytononProd
          method: post
          cors: true

  ecsdeployprodblueapi:
    name: ecsdeploy_prodblueapi
    handler: ecs_deploy_prodblue.lambda_handler
    timeout: 10
    environment:
      REPO_URI: ${self:custom.repouri}
      VPC: ${self:custom.vpc}
      SUBNET1: ${self:custom.subnet1}
      SUBNET2: ${self:custom.subnet2}
      SG: ${self:custom.sg}
    events:
      - http:
          path: /stacks/deploytoprodBlue
          method: post
          cors: true       

  swapprodapi:
    name: swapprodapi
    handler: swapprod.lambda_handler
    timeout: 10
    events:
      - http:
          path: /stacks/swapProdBlueAndGreen
          method: post
          cors: true

  testapi:
    name: testfortest
    handler: testfortest.lambda_handler
    timeout: 10
    events:
      - http:
          path: /test
          method: post
          cors: true

# you can add CloudFormation resource templates here
resources:
  Resources:

    S3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: agero-ecs-test-bucket
        VersioningConfiguration:
          Status: Enabled
          
    AgeroECSCFTemplateS3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: agero-ecs-cf-template
        VersioningConfiguration:
          Status: Enabled
        
    DynamoECSInventoryNonProd:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ECS_Inventory_NonProduction
        AttributeDefinitions:
          - AttributeName: "ApplicationName"  
            AttributeType: "S"
          - AttributeName: "Environment"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "ApplicationName"
            KeyType: "HASH"
          - AttributeName: "Environment"
            KeyType: "RANGE"      
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoECSInventoryProd:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ECS_Inventory_Production
        AttributeDefinitions:
          - AttributeName: "ApplicationName"
            AttributeType: "S"
          - AttributeName: "Environment"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "ApplicationName"
            KeyType: "HASH"
          - AttributeName: "Environment"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoECSInventoryTrainingDA:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ECS_Inventory_Training_DA
        AttributeDefinitions:
          - AttributeName: "ApplicationName"
            AttributeType: "S"
          - AttributeName: "Environment"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "ApplicationName"
            KeyType: "HASH"
          - AttributeName: "Environment"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"

    DynamoDevOpsLogs:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DevOpsLogsTable
        AttributeDefinitions:
          - AttributeName: "ResourceName"
            AttributeType: "S"
          - AttributeName: "Time"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "ResourceName"
            KeyType: "HASH"
          - AttributeName: "Time"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
         
          
#    Repository:
#      Type: AWS::ECR::Repository
#      Properties: 
#        RepositoryName: ${self:custom.apiname}
#
#    Cluster:
#      Type: AWS::ECS::Cluster
#      Properties:
#        ClusterName: ${self:custom.apiname}
#
#    TaskDefinition:
#      Type: AWS::ECS::TaskDefinition
#      Properties:
#        Cpu: 1024
#        ExecutionRoleArn: arn:aws:iam::${self:custom.accountid}:role/ecsTaskExecutionRole
#        Memory: 2048
#        NetworkMode: awsvpc
#        RequiresCompatibilities: 
#          - FARGATE
#        TaskRoleArn: arn:aws:iam::${self:custom.accountid}:role/ecsTaskExecutionRole
#        ContainerDefinitions: 
#          - Image: 377558703253.dkr.ecr.us-east-1.amazonaws.com/${self:custom.apiname}
#            Name: ${self:custom.apiname}

    
                
        

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
