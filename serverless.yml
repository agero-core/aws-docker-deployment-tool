# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-python-requirements
custom: ${file(./parameters.yml)}

service: devops-ecs-resources-demo # NOTE: update this with your service name

provider:
  name: aws
  runtime: python2.7
  role: arn:aws:iam::${self:custom.nonprod_accountid}:role/Containerization_Lambda_Deployment
  region: ${self:custom.region}

functions:              
  createstackapi:
    name: createstackapi
    handler: createstackapi.lambda_handler
    timeout: 900
    environment:
      NONPROD_ACC: ${self:custom.nonprod_accountid}
      PROD_ACC: ${self:custom.prod_accountid}
      CF_TEMPLATE: ${self:custom.cftemplate}
      DEVQA_VPC: ${self:custom.devqa_vpc}
      STAGE_VPC: ${self:custom.stage_vpc}
      TRAINING_VPC: ${self:custom.training_vpc}
      DA_VPC: ${self:custom.da_vpc}
      PROD_VPC: ${self:custom.prod_vpc}
      DEVQA_SUBNET: ${self:custom.devqa_subnet}
      STAGE_SUBNET: ${self:custom.stage_subnet}
      TRAINING_SUBNET: ${self:custom.training_subnet}
      DA_SUBNET: ${self:custom.da_subnet}
      PROD_SUBNET: ${self:custom.prod_subnet}
      DEVQA_ALBSUBNET: ${self:custom.devqa_elbsubnet}
      STAGE_ALBSUBNET: ${self:custom.stage_elbsubnet}
      TRAINING_ALBSUBNET: ${self:custom.training_elbsubnet}
      DA_ALBSUBNET: ${self:custom.da_elbsubnet}
      PROD_ALBSUBNET: ${self:custom.prod_elbsubnet}
      DEVQA_SG: ${self:custom.devqa_sg}
      STAGE_SG: ${self:custom.stage_sg}
      TRAINING_SG: ${self:custom.training_sg}
      DA_SG: ${self:custom.da_sg}
      PROD_SG: ${self:custom.prod_sg}
      DEVQA_ALBSG: ${self:custom.devqa_elbsg}
      STAGE_ALBSG: ${self:custom.stage_elbsg}
      TRAINING_ALBSG: ${self:custom.training_elbsg}
      DA_ALBSG: ${self:custom.da_elbsg}
      PROD_ALBSG: ${self:custom.prod_elbsg}
      REPO_URI: ${self:custom.repouri}
      HOSTEDZONE_NAME: ${self:custom.hostedzonename}
      PROD_HOSTEDZONE_NAME: ${self:custom.prodhostedzonename} 
      ADMIN_ROLEARN: ${self:custom.admin_rolearn}
      EXECUTION_ROLENAME: ${self:custom.execution_rolename}
      STSROLEARN: ${self:custom.stsrolearn}
    events:
      - http:
          path: /stacks
          method: post
          cors: true
  
  deletestackapi:
    name: deletestackapi
    handler: deletestackapi.lambda_handler
    timeout: 30
    environment:
      NONPROD_ACC: ${self:custom.nonprod_accountid}
      PROD_ACC: ${self:custom.prod_accountid}
      REGION: ${self:custom.region}
      STSROLEARN: ${self:custom.stsrolearn}
    events:
      - http:
          path: /stacks
          method: delete
          cors: true   

  ecsdeploytononprodapi:
    name: ecsdeploytoNonProdApi
    handler: ecsdeploytoNonProdApi.lambda_handler
    timeout: 300
    environment:
      NONPROD_ACC: ${self:custom.nonprod_accountid}
      DEVQA_VPC: ${self:custom.devqa_vpc}
      STAGE_VPC: ${self:custom.stage_vpc}
      TRAINING_VPC: ${self:custom.training_vpc}
      DA_VPC: ${self:custom.da_vpc}      
      DEVQA_SUBNET: ${self:custom.devqa_subnet}
      STAGE_SUBNET: ${self:custom.stage_subnet}
      TRAINING_SUBNET: ${self:custom.training_subnet}
      DA_SUBNET: ${self:custom.da_subnet}
      DEVQA_SG: ${self:custom.devqa_sg}
      STAGE_SG: ${self:custom.stage_sg}
      TRAINING_SG: ${self:custom.training_sg}
      DA_SG: ${self:custom.da_sg}
      STSROLEARN: ${self:custom.stsrolearn}
    events:
      - http:
          path: /stacks/deploytoNonProd
          method: post
          cors: true

  ecsdeploytoprodblueapi:
    name: ecsdeploytoProdBlueApi
    handler: ecsdeploytoProdBlueApi.lambda_handler
    timeout: 300
    environment:
      PROD_VPC: ${self:custom.prod_vpc}
      PROD_SUBNET: ${self:custom.prod_subnet}
      PROD_SG: ${self:custom.prod_sg}
      STSROLEARN: ${self:custom.stsrolearn}
      STSROLE_PROD: ${self:custom.stsrole_prod}
    events:
      - http:
          path: /stacks/deploytoProdBlue
          method: post
          cors: true

  swapprodapi:
    name: swapprodapi
    handler: swapprodapi.lambda_handler
    timeout: 10
    environment:
      STSROLEARN: ${self:custom.stsrolearn}
      STSROLE_PROD: ${self:custom.stsrole_prod}
    events:
      - http:
          path: /stacks/swapProdBlueAndGreen
          method: post
          cors: true
   


# you can add CloudFormation resource templates here
resources:
  Resources:
    Repository:
      Type: AWS::ECR::Repository
      Properties:
        RepositoryName: ecs_devopsrepo
        RepositoryPolicyText:
          Version: "2008-10-17"
          Statement: 
            - 
              Sid: CrossAccountPull
              Effect: Allow
              Principal: 
                AWS: 
                  - "arn:aws:iam::${self:custom.prod_accountid}:root"
              Action: 
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "ecr:BatchCheckLayerAvailability"

    Cluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: DevOpsCluster
          
    AgeroECSCFTemplateS3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.ecscftemplatebucket}
        VersioningConfiguration:
          Status: Enabled
